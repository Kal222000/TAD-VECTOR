using System;
using System.Drawing;

public class Vector
{
	private int longitud;
	private const int max = 100000;
	private int[] Elementos;

	public Vector(int longitud)
	{
		if(longitud > max)
		{
			Console.WriteLine("La longitud supera la cantidad maxima");
			return;
		}
		else if(longitud <= 0)
		{
			Console.WriteLine("Valor Invalido");
			return;
		}
		else
		{
            this.Elementos = new int[max];
			this.longitud = longitud;
        }

	}

    public void Modificar_Longitud(int longitud)
    {
        if (longitud > max)
        {
            Console.WriteLine("La longitud supera la cantidad maxima");
            return;
        }
        else if (longitud <= 0)
        {
            Console.WriteLine("Valor Invalido");
            return;
        }
        else
        {
            this.longitud = longitud;
        }
    }

    public int Obtener_Longitud()
    {
        return this.longitud;
    }

    public void Asignar_Elemento(int pos, int valor)
    {
        pos -= 1;
        if (pos > this.longitud)
        {
            Console.WriteLine("Supera la longitud asignada");
            return;
        }
        else if (pos < 0)
        {
            Console.WriteLine("Valor Invalido");
            return;
        }
        else
        {
            this.Elementos[pos] = valor;
        }
    }

    public int Obtener_Elemento(int pos)
    {
        pos -= 1;
        if (pos > this.longitud)
        {
            Console.WriteLine("Supera la longitud asignada");
            return 0;
        }
        else if (pos < 0)
        {
            Console.WriteLine("Valor Invalido");
            return 0;
        }
        else
        {
            return this.Elementos[pos];
        }
    }

    public void Mostrar_Array()
    {
        string aux = "";
        for(int i = 0; i < this.longitud; i++)
        {
            aux += this.Elementos[i].ToString();
            aux += " ";
        }

        Console.WriteLine(aux);
    }

    public void Selection_Sort()
    {
        int min, aux;
        for (int i = 0; i < this.longitud; i++)
        {
            min = this.Elementos[i];
            aux = i;
            for (int j = i; j < this.longitud; j++)
            {
                if (min > this.Elementos[j])
                {
                    min = this.Elementos[j];
                    aux = j;
                }
            }
            this.Elementos[aux] = this.Elementos[i];
            this.Elementos[i] = min;
        }
    }

    public void Insertion_Sort()
    {
        int pos, aux;
        for (int i = 0; i < this.longitud; i++)
        {
            pos = i;
            aux = Elementos[i];
            while(pos > 0 && this.Elementos[pos] < this.Elementos[pos - 1])
            {
                this.Elementos[pos] = this.Elementos[pos - 1];
                this.Elementos[pos - 1] = aux;
                aux = this.Elementos[pos - 1];
                pos--;
            }
        }
    }

    public void Merge_Sort_Llamada_Funcion()
    {
        int[] vector_aux = new int[this.longitud];
        for (int i = 0; i < this.longitud; i++)
        {
            vector_aux[i] = this.Elementos[i];
        }

        vector_aux = Merge_Sort(vector_aux);

        for (int i = 0; i < this.longitud; i++)
        {
            this.Elementos[i] = vector_aux[i];
        }
    }

    private int[] Merge_Sort(int[] vec)
    {
        if (vec.Length <= 1)
        {
            return vec;
        }
        else
        {
            int middle = vec.Length / 2;
            int[] vec1 = new int[middle];
            int[] vec2 = new int[vec.Length - middle];
            for (int i = 0; i < middle; i++)
            {
                vec1[i] = vec[i];
            }
            int j = 0;
            for (int i = middle; i < vec.Length; i++)
            {
                vec2[j] = vec[i];
                j++;
            }
            vec1 = Merge_Sort(vec1);
            vec2 = Merge_Sort(vec2);
            return Merge(vec1, vec2);
        }
    }

    private int[] Merge(int[] array1, int[] array2)
    {
        int[] array3 = new int[array1.Length + array2.Length];
        int i, j, l;
        i = 0;
        j = 0;
        l = 0;
        while (i < array1.Length && j < array2.Length)
        {
            if (i < array1.Length && array1[i] < array2[j])
            {
                array3[l] = array1[i];
                i++;
                l++;
            }
            else
            {
                array3[l] = array2[j];
                j++;
                l++;
            }
        }

        while (i < array1.Length)
        {
            array3[l] = array1[i];
            i++;
            l++;
        }

        while (j < array2.Length)
        {
            array3[l] = array2[j];
            l++;
            j++;
        }

        return array3;
    }

    public void InsertarElemento(int pos, int valor)
    {
        if(pos == this.longitud)
        {
            this.Elementos[pos] = this.Elementos[pos - 1];
            this.Elementos[pos - 1] = valor;
            this.longitud++;
            return;
        }
        else
        {
            int valor_aux = Elementos[this.longitud - 1];
            this.longitud--;
            InsertarElemento(pos, valor);
            this.longitud++;
            this.Elementos[this.longitud - 1] = valor_aux;
        }
    }

    public void EliminarElemento(int pos)
    {
        if (pos == this.longitud)
        {
            this.Elementos[pos - 1] = this.Elementos[pos];
            this.longitud--;
            return;
        }
        else
        {
            this.longitud--;
            EliminarElemento(pos);
            this.longitud++;
            this.Elementos[this.longitud] = this.Elementos[this.longitud+1];
        }
    }

    public bool Comparar(Vector vec)
    {
        if(this.longitud != vec.Obtener_Longitud())
        {
            return false;
        }
        else
        {
            for(int i = 0; i < this.longitud; i++)
            {
                if (this.Elementos[i] != vec.Obtener_Elemento(i+1))
                { 
                    return false;
                }
                else
                {
                    continue;
                }
            }
            return true;
        }
    }

    public void Union(Vector vec)
    {
        int[] vec_aux = new int[this.longitud + vec.Obtener_Longitud()];
        int contador = 0;

        for (int i = 0; i < this.longitud; i++, contador++)
        {
            vec_aux[i] = this.Elementos[i];
            this.Elementos[i] = 0;
        }

        int auxiliar = 0, longitud_aux = vec.Obtener_Longitud();
        for(int j = 0; j < longitud_aux; j++)
        {
            for(int i = 0; i <= contador; i++)
            {
                if (vec_aux[i] == vec.Obtener_Elemento(j+1))
                {
                    auxiliar++;
                }
                else
                {
                    continue;
                }
            }

            if(auxiliar > 0)
            {
                auxiliar = 0;
                continue;
            }
            else
            {
                vec_aux[contador] = vec.Obtener_Elemento(j + 1);
                contador++;
            }
        }

        this.longitud = contador;
        for(int i = 0; i < this.longitud; i++)
        {
            this.Elementos[i] = vec_aux[i];
        }
    }

    public bool Subconjunto(Vector vec)
    {
        int verificador = 0, j = 0;
        for(int i = 0; i <= this.longitud; i++)
        {
            if(verificador == vec.Obtener_Longitud())
            {
                return true;
            }
            else
            {
                if ((vec.Obtener_Elemento(i+1) == this.Elementos[i]) && i < this.longitud)
                {
                    verificador++;
                    j++;
                }
                else
                {
                    j = 0;
                    verificador = 0;
                }
            }
        }

        return false;
    }

    public void EliminarDuplicados()
    {
        Dictionary<int, int> mapa = new Dictionary<int, int>();
        int verificador = 0, pos = 0;
        for(int i = 0; i < this.longitud; i++)
        {
            for(int j = 0; j < mapa.Count; j++)
            {
                if (mapa[j] == this.Elementos[i])
                {
                    verificador++;
                }
                else
                {
                    continue;
                }
            }

            if (verificador > 0)
            {
                this.Elementos[i] = 0;
                verificador = 0;
                continue;
            }
            else
            {
                mapa[pos] = this.Elementos[i];
                this.Elementos[i] = 0;
                pos++;
            }
        }

        for(int i = 0; i < pos; i++)
        {
            this.Elementos[i] = mapa[i];
        }

        this.longitud = pos;
    }
}